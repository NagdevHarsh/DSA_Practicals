Problem Explanation
The goal of this problem is to remove duplicates from a sorted integer array nums in-place, such that each unique element appears only once. After removing the duplicates, you should return the count of unique elements, and the first k elements of nums should contain the unique elements.

Key Requirements:
In-place Modification: Modify the nums array directly to remove duplicates.
Return Count: Return the count k of unique elements in the array.
Order Preservation: The relative order of elements should remain the same.
Remaining Elements: After the first k elements, the content of nums is not important.
Approach:
Since the array is sorted, we can use a two-pointer technique to remove duplicates:

Pointer i: Iterates through the array.
Pointer k: Keeps track of the position of the next unique element.
Check for Duplicates: As we iterate, we compare the current element (nums[i]) with the last unique element (nums[k - 1]). If they are different, we place the current element at the position k and increment k.

PYTHON CODE:
def removeDuplicates(nums):
    if not nums:
        return 0  # Handle empty array case

    k = 1  # Pointer for the next unique element, starts at 1 since the first element is always unique
    
    for i in range(1, len(nums)):
        if nums[i] != nums[i - 1]:  # If current element is not a duplicate
            nums[k] = nums[i]       # Place it at the next unique position
            k += 1                  # Increment the unique count

    return k  # Return the number of unique elements

# Example usage:

# Example 1
nums1 = [1, 1, 2]
k1 = removeDuplicates(nums1)
print(k1, nums1[:k1])  # Output: 2 [1, 2]

# Example 2
nums2 = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
k2 = removeDuplicates(nums2)
print(k2, nums2[:k2])  # Output: 5 [0, 1, 2, 3, 4]
