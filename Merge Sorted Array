-->You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n,representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should 
be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Problem Explanation:
The task is to merge two sorted arrays, nums1 and nums2, into one sorted array, but with some constraints:

nums1 has extra space at the end to accommodate all elements from nums2. The first m elements of nums1 are valid numbers, while the last n elements are zeros (used as placeholders).
nums2 contains n valid elements, all sorted in non-decreasing order.
The goal is to merge the two arrays into nums1, modifying it in-place.
Key Points:
nums1 has a size of m + n. Initially, only the first m elements are relevant, and the rest are zeros. These zeros should be replaced with elements from nums2.
nums2 has n elements, all sorted.
We have to merge both arrays in such a way that the result is a sorted array in nums1.
Approach:
Since the arrays are already sorted, we can take advantage of this by merging them starting from the largest elements and working our way backward. This way, we can place elements directly into the end of nums1, avoiding the need for extra space or shifting elements.

Steps:
Set up three pointers:
i to track the last element in the relevant part of nums1 (i.e., m-1).
j to track the last element in nums2 (i.e., n-1).
k to track the position where the next largest element should go in nums1 (i.e., m + n - 1).
Start comparing elements from nums1[i] and nums2[j]:
Place the larger of the two at position k in nums1.
Move the corresponding pointer (i or j) and decrement k.
If any elements are left in nums2 after the loop, copy them into nums1.

PYTHON CODE:
def merge(nums1, m, nums2, n):
    # Start from the end of both arrays
    i = m - 1  # Last element in nums1's actual data
    j = n - 1  # Last element in nums2
    k = m + n - 1  # Last position in nums1

    # Merge in reverse order to avoid overwriting elements in nums1
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1
    
    # If there are elements left in nums2, copy them
    while j >= 0:
        nums1[k] = nums2[j]
        j -= 1
        k -= 1

# Example usage:
nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3
merge(nums1, m, nums2, n)
print(nums1)  # Output: [1, 2, 2, 3, 5, 6]
