Problem Explanation:
You are given an array prices where each element represents the price of a stock on that day. Your goal is to:

Buy the stock on one day.
Sell it on a later day (in the future).
Maximize the profit from this transaction.
If no profit can be made, return 0.

Approach:
This problem can be solved efficiently using a single pass through the array.
We will track the minimum price seen so far as we iterate through the array.
For each price, we will calculate the potential profit if we sell on that day (i.e., price - min_price).
The goal is to keep updating the maximum profit.

PYTHON CODE:

def maxProfit(prices):
    # Step 1: Initialize minimum price to infinity and max profit to 0
    min_price = float('inf')
    max_profit = 0

    # Step 2: Traverse through the prices array
    for price in prices:
        # If the current price is lower than min_price, update min_price
        if price < min_price:
            min_price = price
        # Else, calculate the potential profit and update max_profit if it's higher
        elif price - min_price > max_profit:
            max_profit = price - min_price

    # Step 3: Return the maximum profit achieved
    return max_profit

# Example usage:
prices1 = [7, 1, 5, 3, 6, 4]
print(f"Max Profit for prices1: {maxProfit(prices1)}")  # Output: 5

prices2 = [7, 6, 4, 3, 1]
print(f"Max Profit for prices2: {maxProfit(prices2)}")  # Output: 0
